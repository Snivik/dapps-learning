/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GalaxyWarContract extends Truffle.Contract<GalaxyWarInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GalaxyWarInstance>;
}

type AllEvents = never;

export interface GalaxyWarInstance extends Truffle.ContractInstance {
  _unitPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  updateUnitPrice: {
    (
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendBalanceTo: {
    (to: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(to: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getOwner(
    planetId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPower(
    planetId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mint: {
    (
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyPlanetaryForce: {
    (
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendSupportTo: {
    (
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startAnAttack: {
    (
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: number | BN | string,
      to: number | BN | string,
      forces: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _unitPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    updateUnitPrice: {
      (
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendBalanceTo: {
      (to: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(to: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getOwner(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getPower(
      planetId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mint: {
      (
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyPlanetaryForce: {
      (
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        planetId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendSupportTo: {
      (
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    startAnAttack: {
      (
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: number | BN | string,
        to: number | BN | string,
        forces: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
